{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>ddflare is a DDNS (Dynamic DNS) go library that allows DNS record updates via either the Cloudflare API or the DynDNS update prococol v3.</p> <p>Note</p> <p>The DynDNS update prococol v3 is an HTTP API introduced back in the day by dyndns.org (now Dyn, part of Oracle) which is used by many of the available DDNS service providers available nowadays.</p> <p>It comes with a CLI tool built on top of the library and released for different architectures.</p> <p>Tip</p> <p>In order to update your DNS records with ddflare you need a DNS domain registered with Cloudflare or a registratrion to a Dynamic DNS service provider (e.g., No-IP, Dyn, ...).</p>"},{"location":"#quickstart","title":"Quickstart","text":"<ul> <li>CLI</li> <li>go library</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Update a target domain name (FQDN, recorded as a type A record) to point to the current public address or a custom IP.</li> <li>Retrieve and display the current public IP address.</li> <li>Resolve any domain name (acting as a simple DNS client).</li> </ul>"},{"location":"ddflare-cli-install/","title":"ddflare CLI","text":"<p>ddflare CLI is a DynDNS client built upon the ddflare library. It allows to update available DynDNS records at DynDNS update prococol v3 compliant DynDNS providers. ddflare CLI is also compatibile with the Cloudflare API and allows to update existing DNS records registered at Cloudflare.</p>"},{"location":"ddflare-cli-install/#get-ddflare","title":"Get ddflare","text":"<p>ddflare CLI is released as statically compiled binaries for different OS/architetures that you can grab from the release page.</p> example: download and install ddflare x86_64 binary<pre><code>wget https://github.com/ddflare/ddflare/releases/download/v0.7.0/ddflare-linux-amd64\n\nsudo install ddflare-linux-amd64 /usr/local/bin/ddflare\n</code></pre> <p>ddflare CLI is also available as container images on the github registry.</p> example: run ddflare in Docker<pre><code>docker run -ti --rm ghcr.io/ddflare/ddflare:0.7.0\n</code></pre>"},{"location":"ddflare-cli-install/#commands","title":"Commands","text":"<p>ddflare has two main commands:</p> <ul> <li><code>set</code> - updates the type A record of the target FQDN to the current public IP address of the the client (or updates to the IP address passed as argument).</li> <li><code>get</code> - retrieves the current public IP address of the client (or resolves the FQDN passed as argument).</li> </ul> <p>Run <code>ddflare help</code> to display all the available commands and options.</p>"},{"location":"ddflare-cli-quickstart/","title":"Quickstart","text":""},{"location":"ddflare-cli-quickstart/#update-dyndns-fqdn","title":"Update DynDNS FQDN","text":"<p>Update myhost.ddns.net at NoIP with a DDNS Key Username <code>68816xj</code> and a DDNS Key Password <code>v4UMHzugodpE</code>:</p> binarydocker <pre><code>ddflare set -s noip -t 68816xj:v4UMHzugodpE  myhost.ddns.net\n</code></pre> <pre><code>docker run -ti --rm ghcr.io/ddflare/ddflare:0.7.0 set -s noip -t 68816xj:v4UMHzugodpE  myhost.ddns.net\n</code></pre>"},{"location":"ddflare-cli-quickstart/#get-the-current-public-ip-address","title":"Get the current public IP address","text":"<p>Retrieving the current public IP address is as easy as running:</p> binarydocker <pre><code>ddflare get\n</code></pre> <pre><code>docker run -ti --rm ghcr.io/ddflare/ddflare:0.7.0 get\n</code></pre> <p>ddflare queries the <code>ipify.org</code> service under the hood, which detects the public IP address used to reach the service.</p>"},{"location":"ddflare-cli-update/","title":"Update","text":""},{"location":"ddflare-cli-update/#update-domain-name-via-ddns-services","title":"Update domain name via DDNS services","text":"<p>In order to update a domain name with a DynDNS client you should register to a DDNS service first, configure the desired FQDN there and retrieve the authentication token or the update key  required to authenticate to the service.</p> <p>Tip</p> <p>Some DynDNS providers do not provide authentication tokens or update keys: in that case the authentication token can be generated using the user and password of the service account concatenated by a colon: <code>user:password</code>.</p> <p>To update a domain name (FQDN, type A record) to the current public IP address of the host run:</p> <p><pre><code>ddflare set -s &lt;DDNS_URL&gt; -t &lt;AUTH_TOKEN&gt; &lt;FQDN&gt;\n</code></pre> where <code>&lt;DDNS_URL&gt;</code> is the http endpoint of the DDNS service, <code>&lt;FQDN&gt;</code> is the domain to be updated and <code>&lt;AUTH_TOKEN&gt;</code> is the Update Key or the API authentication token.</p> <p>Example</p> Required data Sample value DDNS provider No-IP FQDN to update <code>myhost.ddns.net</code> user <code>68816xj</code> password <code>v4UMHzugodpE</code> update myhost.ddns.net at NoIP<pre><code>ddflare set -s noip -t 68816xj:v4UMHzugodpE  myhost.ddns.net\n</code></pre>"},{"location":"ddflare-cli-update/#update-domain-name-via-cloudflare","title":"Update domain name via Cloudflare","text":"<p>Note</p> <p>To update a FQDN via Cloudflare you need to buy a domain at Cloudflare (or transfer it to).  You also need to create a Cloudflare API token with <code>Zone.DNS Edit</code> permission following the Cloudflare docs.</p> <p>ddflare can update existing type A DNS records but cannot create new ones yet, so the record should be created in advance.  To create a type A record see Cloudflare's Manage DNS Records docs.</p> <p>Tip</p> <p>When creating a type A DNS record pay attention to the value of the <code>TTL</code> field: it tracks the number of seconds DNS clients and DNS resolvers are allowed to cache the resolved IP address. You may want to keep the TTL low (the allowed minimum is 60 secs) if you plan to use the record to track the (dynamic) IP address of a host in a DDNS scenario.</p> <p><pre><code>ddflare set -t &lt;CLOUDFLARE_TOKEN&gt; &lt;FQDN&gt;\n</code></pre> where <code>&lt;FQDN&gt;</code> is the domain to be updated and <code>&lt;CLOUDFLARE_TOKEN&gt;</code> is the Cloudflare API token.</p> <p>Example</p> Required data Sample value FQDN to update <code>myhost.example.com</code> API token <code>gB1fOLbl2d5XynhfIOJvzX8Y4rZnU5RLPW1hg7cM</code> update myhost.example.com at Cloudflare<pre><code>ddflare set -t gB1fOLbl2d5XynhfIOJvzX8Y4rZnU5RLPW1hg7cM  myhost.example.com\n</code></pre>"},{"location":"ddflare-k8s/","title":"Deploy on a Kubernetes cluster","text":"<p>ddflare can be run as a <code>Deployment</code> on a Kubernetes cluster.</p> <p>In this case it is reccomended to store the service credentials in a Kubernetes <code>Secret</code>: <pre><code>kubectl -n ddflare create secret generic my-domain --from-literal=token=&lt;SERVICE_CREDENTIALS&gt;\n</code></pre> and pass it to the ddflare deployment via an environment variable.</p>"},{"location":"ddflare-k8s/#examples","title":"Examples","text":""},{"location":"ddflare-k8s/#ddns-service-no-ip","title":"DDNS service (No-IP)","text":"<p>Prerequisite is to register for a No-IP account and get a FQDN and the authentication credentials as explained in the Update section.</p> Required data Sample value DDNS provider No-IP FQDN to update <code>myhost.ddns.net</code> user <code>68816xj</code> password <code>v4UMHzugodpE</code> <p>Create the secret with: <pre><code>kubectl -n ddflare create secret generic myhost.ddns.net \\\n    --from-literal=token=68816xj:v4UMHzugodpE\n</code></pre></p> <p>Apply the ddflare deployment yaml:</p> <p>myhost-ddns-net.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myhost.ddns.net\n  namespace: ddflare\nspec:\n  selector:\n    matchLabels:\n      ddomain: myhost.ddns.net\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        ddomain: myhost.ddns.net\n    spec:\n      containers:\n        - name: ddflare\n          image: ghcr.io/ddflare/ddflare:0.7.0\n          args: [\"set\", \"-s\", \"noip\", \"-l\", \"myhost.ddns.net\"]\n          env:\n            - name: DDFLARE_API_TOKEN\n              valueFrom:\n                secretKeyRef:\n                  name: myhost.ddns.net\n                  key: token\n</code></pre> with: <pre><code>kubectl apply -f myhost-ddns-net.yaml\n</code></pre></p>"},{"location":"ddflare-k8s/#cloudflare","title":"Cloudflare","text":"<p>Prerequisite is to have registered a domain with Couldflare and have created a type A record and a Cloudflare API token as explained in the Update section.</p> Required data Sample value FQDN to update <code>myhost.example.com</code> API token <code>gB1fOLbl2d5XynhfIOJvzX8Y4rZnU5RLPW1hg7cM</code> <p>Create the secret with: <pre><code>kubectl -n ddflare create secret generic myhost.example.com \\\n    --from-literal=token=gB1fOLbl2d5XynhfIOJvzX8Y4rZnU5RLPW1hg7cM\n</code></pre></p> <p>Apply the ddflare deployment yaml: myhost-example-com.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myhost.example.com\n  namespace: ddflare\nspec:\n  selector:\n    matchLabels:\n      ddomain: myhost.example.com\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        ddomain: myhost.example.com\n    spec:\n      containers:\n        - name: ddflare\n          image: ghcr.io/ddflare/ddflare:0.7.0\n          args: [\"set\", \"-l\", \"myhost.example.com\"]\n          env:\n            - name: DDFLARE_API_TOKEN\n              valueFrom:\n                secretKeyRef:\n                  name: myhost.example.com\n                  key: token\n</code></pre> with: <pre><code>kubectl apply -f myhost-example-com.yaml\n</code></pre></p>"},{"location":"quickstart-library/","title":"ddflare Library","text":"<p>Library documentation is published at https://pkg.go.dev/github.com/ddflare/ddflare .</p>"},{"location":"quickstart-library/#quickstart","title":"Quickstart","text":"<p>Updating a DNS type A record with the actual Public IP address is achieved with 4 steps:</p> <ol> <li>create a new DNSManager  (<code>NewDNSManager()</code>)</li> <li>initialize the DNSManager with the authentication credentials (<code>.Init()</code>)</li> <li>retrieve the current public IP address (<code>GetPublicIP()</code>)</li> <li>update the DNS record via the DNSManager (<code>.UpdateFQDN</code>)</li> </ol> example: update www.myddns.host at NoIP<pre><code>import \"github.com/ddflare/ddflare\"\n\nfunc main() {\n  // fqdn to be updated\n  fqdn := \"www.myddns.host\"\n  // auth Token from the DDNS service if available or contatenation of user:password\n  authToken := \"user:password\"\n\n  // create a new DNSManager targeting the desired service (ddflare.Cloudflare,\n  // ddflare.NoIP or ddflare.DDNS). For a DDNS provider using the DynDNS API v3\n  // but not in the list, pick ddflare.DDNS and set a custom API endpoint with\n  // dm.SetAPIEndpoint(\"$HTTP_ENDPOINT\")\n  dm, err := ddflare.NewDNSManager(ddflare.NoIP)\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  // init the DNSManager with the API credentials\n  if err = dm.Init(authToken); err != nil {\n    log.Fatal(err)\n  }\n\n  // retrieve the current Public IP address\n  pubIP, err := ddflare.GetPublicIP()\n  if err != nil {\n    log.Fatal(err)\n  }\n  // set the Public IP address just retrieved as the addres of `fqdn`\n  if err = dm.UpdateFQDN(fqdn, pubIP); err != nil {\n    log.Fatal(\"update failed\")\n  }\n\n  log.Info(\"update successful\")\n}\n</code></pre>"}]}